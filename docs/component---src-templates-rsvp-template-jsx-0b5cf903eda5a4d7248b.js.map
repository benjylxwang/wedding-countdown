{"version":3,"sources":["webpack:///./src/views/NavbarAlt/NavbarAlt.jsx","webpack:///./src/templates/rsvp-template.jsx"],"names":["MyNavbar","frontmatter","extraItems","brand","expanded","React","useState","className","clsx","variant","expand","fixed","Brand","href","defaultProps","query","RSVPPage","langSelectorPart","data","pageContext","langKey","defaultLang","langTextMap","site","siteMetadata","keywords","description","nodes","allMarkdownRemark","navBarNode","breakDownAllNodes","Object","keys","length","LanguageSelector","SEO","lang","title"],"mappings":"+OASMA,G,UAAW,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,WACvBC,EAAUF,EAAVE,MAEDC,EAAYC,IAAMC,UAAS,GAHc,GAKhD,OACE,uBACEC,UAAWC,YAAK,mBAChBC,QAAQ,UACRC,OAAO,KACPC,MAAM,MACNP,SAAUA,GAEV,2BACE,sBAAQQ,MAAR,CAAcL,UAAU,iBAAiBM,KAAK,OAC3CV,GAEFD,MAWTF,EAASc,aAAe,CACtBb,YAAa,GACbC,WAAY,MAGCF,Q,gDCzBFe,G,UAAK,cAwFZC,EAAW,SAAC,GAAkE,IAU9EC,EAVcC,EAA+D,EAA/DA,KAA+D,IAAzDC,YAAeC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,YAAoB,EAM7EJ,EAJFK,KACEC,aAAgBC,EAH6D,EAG7DA,SAAUC,EAHmD,EAGnDA,YAEPC,EACnBT,EADFU,kBAAqBD,MAGfE,EAAeC,YAAkBH,GAAjCE,WASR,OANmB,MAAfP,GAAuBS,OAAOC,KAAKV,GAAaW,OAAS,IAC3DhB,EACE,kBAACiB,EAAA,EAAD,CAAkBd,QAASA,EAASC,YAAaA,EAAaC,YAAaA,KAK7E,oCACE,kBAACa,EAAA,EAAD,CACEC,KAAMhB,EACNiB,MAAM,sBACNZ,SAAUA,EACVC,YAAaA,IAEf,kBAAC,EAAD,CAAWzB,YAAa4B,EAAW5B,YAAaC,WAAYe,MAUlED,EAASF,aAAe,CACtBK,YAAa,CACXC,QAAS,KACTC,YAAa,KACbC,YAAa,KAIFN,a","file":"component---src-templates-rsvp-template-jsx-0b5cf903eda5a4d7248b.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport clsx from \"clsx\";\r\n\r\nimport { Navbar, Container } from \"react-bootstrap\";\r\n\r\nimport \"./NavbarAlt.scss\";\r\n\r\nconst MyNavbar = ({ frontmatter, extraItems }) => {\r\n  const { brand } = frontmatter;\r\n\r\n  const [expanded] = React.useState(false);\r\n\r\n  return (\r\n    <Navbar\r\n      className={clsx(\"navbar-alt-root\")}\r\n      variant=\"primary\"\r\n      expand=\"lg\"\r\n      fixed=\"top\"\r\n      expanded={expanded}\r\n    >\r\n      <Container>\r\n        <Navbar.Brand className=\"cursor-pointer\" href=\"../\">\r\n          {brand}\r\n        </Navbar.Brand>\r\n        {extraItems}\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nMyNavbar.propTypes = {\r\n  frontmatter: PropTypes.object,\r\n  extraItems: PropTypes.any,\r\n};\r\n\r\nMyNavbar.defaultProps = {\r\n  frontmatter: {},\r\n  extraItems: null,\r\n};\r\n\r\nexport default MyNavbar;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { graphql } from \"gatsby\";\r\n\r\nimport NavbarAlt from \"views/NavbarAlt\";\r\nimport SEO from \"components/SEO\";\r\nimport LanguageSelector from \"components/LanguageSelector\";\r\n\r\nimport \"utils/fixFontAwesome\";\r\nimport breakDownAllNodes from \"utils/breakDownAllNodes\";\r\n\r\nimport \"../style/rsvp.scss\";\r\n\r\n/**\r\n * get file name list from content/sections folder\r\n */\r\n\r\nexport const query = graphql`\r\n  query RSVPQuery($langKey: String!) {\r\n    site {\r\n      siteMetadata {\r\n        keywords\r\n        description\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      filter: { fields: { langKey: { eq: $langKey } } }\r\n      sort: { order: ASC, fields: [fields___directoryName, fields___fileName] }\r\n    ) {\r\n      nodes {\r\n        frontmatter {\r\n          brand\r\n          anchor\r\n          clients {\r\n            href\r\n            imageFileName\r\n          }\r\n          content\r\n          contactSuggestText\r\n          copyright\r\n          details\r\n          links {\r\n            title\r\n            url\r\n          }\r\n          thingsToDo {\r\n            title\r\n            url\r\n            address\r\n            description\r\n          }\r\n          header\r\n          email\r\n          imageFileName\r\n          jumpToAnchor\r\n          jumpToAnchorText\r\n          daysText\r\n          hoursText\r\n          minutesText\r\n          secondsText\r\n          msText\r\n          menuText\r\n          portfolios {\r\n            content\r\n            header\r\n            subheader\r\n            imageFileName\r\n          }\r\n          rsvpNameLabel\r\n          rsvpEmailLabel\r\n          rsvpInviteCodeLabel\r\n          rsvpConfirmButtonLabel\r\n          rsvpAddPeopleButtonLabel\r\n          rsvpAddAdditionalPeopleLabel\r\n          rsvpOtherPeopleNameLabel\r\n          removePersonButtonLabel\r\n          rsvpDoneSubheader\r\n          rsvpAgainButtonLabel\r\n          savingDetailsAlert\r\n          inviteCodeErrorAlert\r\n          serverIssueAlert\r\n          services {\r\n            content\r\n            header\r\n            iconName\r\n            imageFileName\r\n          }\r\n          subheader\r\n          telephone\r\n          title\r\n          timeline {\r\n            header\r\n            imageFileName\r\n            subheader\r\n          }\r\n        }\r\n        fields {\r\n          fileName\r\n          directoryName\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst RSVPPage = ({ data, pageContext: { langKey, defaultLang, langTextMap } }) => {\r\n  const {\r\n    site: {\r\n      siteMetadata: { keywords, description },\r\n    },\r\n    allMarkdownRemark: { nodes },\r\n  } = data;\r\n\r\n  const { navBarNode } = breakDownAllNodes(nodes);\r\n\r\n  let langSelectorPart;\r\n  if (langTextMap != null && Object.keys(langTextMap).length > 1) {\r\n    langSelectorPart = (\r\n      <LanguageSelector langKey={langKey} defaultLang={defaultLang} langTextMap={langTextMap} />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <SEO\r\n        lang={langKey}\r\n        title=\"Time to Get Married\"\r\n        keywords={keywords}\r\n        description={description}\r\n      />\r\n      <NavbarAlt frontmatter={navBarNode.frontmatter} extraItems={langSelectorPart} />\r\n    </>\r\n  );\r\n};\r\n\r\nRSVPPage.propTypes = {\r\n  data: PropTypes.object.isRequired,\r\n  pageContext: PropTypes.object,\r\n};\r\n\r\nRSVPPage.defaultProps = {\r\n  pageContext: {\r\n    langKey: \"en\",\r\n    defaultLang: \"en\",\r\n    langTextMap: {},\r\n  },\r\n};\r\n\r\nexport default RSVPPage;\r\n"],"sourceRoot":""}